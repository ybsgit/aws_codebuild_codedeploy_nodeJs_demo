version: 0.2
phases:
  install: #install kubectl aws-cli iam authenticator eksctl
    commands:
     - bash eks_cicd/install_pre.sh
  pre_build: 
    commands:
   # generate kubeconfig file and make sure cluster can be accessed with kubectl command
      - rm -f /root/.kube/config
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --name cicd-demo
      - kubectl config view --minify
      - kubectl get svc
  # login to ECR and pull image. 
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com 
      - REPO_URL=$ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPO_NAME
      - docker pull $REPO_URL:$IMAGE_TAG

  build: 
    commands:
   #build and tag the docker image
      - docker build -t $REPO_NAME:$IMAGE_TAG .
      - docker tag $REPO_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPO_NAME:$IMAGE_TAG

  post_build:
  #push the docker image
    commands:
      - docker push $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPO_NAME:$IMAGE_TAG
  # create deployment with docker image
      - kubectl apply -f eks_cicd/deployment.yaml
      - kubectl rollout restart -f eks_cicd/deployment.yaml